/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fi.helsinki.cs.nero.ui;

import fi.helsinki.cs.nero.data.Post;
import fi.helsinki.cs.nero.data.Reservation;
import fi.helsinki.cs.nero.data.Room;
import fi.helsinki.cs.nero.logic.Session;
import java.util.Date;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author skolppo
 */
public class GraphWindow extends javax.swing.JFrame {

    private Session session;
    
    private Date startDate, endDate;
    
    private ChartPanel chartPanel;
    
    private String numberLabel1, numberLabel2;
    
    private int roomSize;
    
    
    /**
     * Creates new form GraphWindow
     */
    public GraphWindow(Session session) {
        this.session = session;
        
        this.endDate = new Date();
        this.startDate = new Date();
        this.startDate.setYear(startDate.getYear()-1);
        
        this.roomSize = 0;
        
        initComponents();
        
        this.startDateCalendarButton.setTargetDate(startDate);
        
        createOccupiedPostPercentageChart();
        
        this.jLabel4.setText(numberLabel1);
        this.jLabel5.setText(numberLabel2);
        
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        chartTypeDropdown = new javax.swing.JComboBox();
        startDateCalendarButton = new net.sourceforge.jcalendarbutton.JCalendarButton();
        endDateCalendarButton = new net.sourceforge.jcalendarbutton.JCalendarButton();
        startDateTextField = new javax.swing.JTextField();
        endDateTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        roomSizeDropdown = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Graafit");

        jLabel1.setLabelFor(startDateCalendarButton);
        jLabel1.setText("Alkupvm.");

        chartTypeDropdown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Työpisteiden varausaste", "Työpisteiden täyttöaste" }));
        chartTypeDropdown.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chartTypeDropdownItemStateChanged(evt);
            }
        });
        chartTypeDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartTypeDropdownActionPerformed(evt);
            }
        });
        chartTypeDropdown.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                chartTypeDropdownPropertyChange(evt);
            }
        });

        startDateCalendarButton.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                startDateCalendarButtonPropertyChange(evt);
            }
        });

        endDateCalendarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endDateCalendarButtonActionPerformed(evt);
            }
        });
        endDateCalendarButton.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                endDateCalendarButtonPropertyChange(evt);
            }
        });

        startDateTextField.setEditable(false);
        startDateTextField.setText(dateToShortString(startDate));

        endDateTextField.setEditable(false);
        endDateTextField.setText(dateToShortString(endDate));

        jLabel2.setLabelFor(endDateCalendarButton);
        jLabel2.setText("Loppupvm.");

        jLabel3.setText("Tyyppi");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1138, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 595, Short.MAX_VALUE)
        );

        closeButton.setText("Sulje");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel4.setText(getNumberLabelData1());

        jLabel5.setText(getNumberLabelData2());

        roomSizeDropdown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kaikki", "1 työpiste", "2 työpistettä", "3 työpistettä", ">3 työpistettä" }));
        roomSizeDropdown.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                roomSizeDropdownItemStateChanged(evt);
            }
        });

        jLabel6.setText("Huoneen koko");

        jLabel7.setText("Viimeisimmän näytettävän kuukauden luvut:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5))
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startDateCalendarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(endDateCalendarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(endDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chartTypeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(roomSizeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(startDateCalendarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(endDateCalendarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(startDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(endDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chartTypeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomSizeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void endDateCalendarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endDateCalendarButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endDateCalendarButtonActionPerformed

    private void startDateCalendarButtonPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_startDateCalendarButtonPropertyChange
        if (evt.getNewValue() instanceof Date) {
            this.startDate = (((Date) evt.getNewValue()));
            this.startDateTextField.setText(dateToShortString(startDate));
            createOccupiedPostPercentageChart();
            updateNumberLabels();
        }
    }//GEN-LAST:event_startDateCalendarButtonPropertyChange

    private void endDateCalendarButtonPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_endDateCalendarButtonPropertyChange
        if (evt.getNewValue() instanceof Date) {
            this.endDate = (((Date) evt.getNewValue()));
            this.endDateTextField.setText(dateToShortString(endDate));
            createOccupiedPostPercentageChart();
            updateNumberLabels();
        }
    }//GEN-LAST:event_endDateCalendarButtonPropertyChange

    private void chartTypeDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chartTypeDropdownActionPerformed
        
    }//GEN-LAST:event_chartTypeDropdownActionPerformed

    private void chartTypeDropdownPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_chartTypeDropdownPropertyChange
    }//GEN-LAST:event_chartTypeDropdownPropertyChange

    private void chartTypeDropdownItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chartTypeDropdownItemStateChanged
        int index = this.chartTypeDropdown.getSelectedIndex();
        if(index == 0) {
            createOccupiedPostPercentageChart();
            updateNumberLabels();
        }
        else if(index == 1) {
            createPeoplePerPostChart();
            updateNumberLabels();
        }
    }//GEN-LAST:event_chartTypeDropdownItemStateChanged

    private void roomSizeDropdownItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_roomSizeDropdownItemStateChanged
        this.roomSize = this.roomSizeDropdown.getSelectedIndex();
        if(this.chartTypeDropdown.getSelectedIndex() == 0) {
            createOccupiedPostPercentageChart();
            updateNumberLabels();
        }
        else if(this.chartTypeDropdown.getSelectedIndex() == 1) {
            createPeoplePerPostChart();
            updateNumberLabels();
        }
    }//GEN-LAST:event_roomSizeDropdownItemStateChanged

    public String getNumberLabelData1() {
        return this.numberLabel1;
    }
    
    public String getNumberLabelData2() {
        return this.numberLabel2;
    }
    
    public void updateNumberLabels() {
        this.jLabel4.setText(numberLabel1);
        this.jLabel5.setText(numberLabel2);
    }
    
    /**
     * Muuttaa annetun date-olion helposti luettavaksi päivämääräksi
     * @param date muutettava päivämäärä
     * @return helosti luettava päivämäärä
     */
    private String dateToShortString(Date date) {
        if (date != null) {
            String dateString = ""+date.getDate();
            dateString = dateString.concat("."+(date.getMonth()+1));
            dateString = dateString.concat("."+(date.getYear()+1900));
            return dateString;
        } else {
            return null;
        }
    }
    
    /**
     * Laskee kuinka monta työpistettä on annettuna päivämääränä ja kuinka moni niistä on varattu
     * @param date Päivämäärä jolta varaustiedot haetaan
     * @return Kuinka suuri prosenttuaalinen osuus kaikista työpisteistä on varattuja
     */
    public double getPostOccupationData(Date date) {
        double totalPosts = 0;
        double occupiedPosts = 0;
        
        for (Room room : this.session.getRooms()) {
            if((this.roomSize==0) || (room.getPosts().length == this.roomSize) || ((this.roomSize==4) && (room.getPosts().length>3))) {
                for (Post post : room.getPosts()) {
                    if(post.getAddDate().before(date)) {
                        ++totalPosts;
                        for (Reservation reservation : post.getReservations()) {
                            if(reservation.getTimeSlice().getStartDate().before(date) && reservation.getTimeSlice().getEndDate().after(date)) {
                                ++occupiedPosts;
                                break;
                            }
                        }
                    }
                }
            }
        }
        this.numberLabel2 = "Työpisteiden kokonaismäärä: "+totalPosts;
        this.numberLabel1 = "Varattujen työpisteiden määrä: "+occupiedPosts;
        return (occupiedPosts/totalPosts)*100.0;
    }
    
    /**
     * Laskee ihmisten määrän per varattu työpiste annetulla päivämäärällä
     * @param date Päivämäärä jolta varaustiedot haetaan
     * @return Kuinka monta ihmistä keskimäärin on per varattu työpiste
     */
    public double getPeoplePerTakenPostData(Date date) {
        double occupiedPosts = 0.0;
        double people = 0.0;
        
        for (Room room : this.session.getRooms()) {
            if((this.roomSize==0) || (room.getPosts().length == this.roomSize) || ((this.roomSize==4) && (room.getPosts().length>3))) {
                for (Post post : room.getPosts()) {
                    if(post.getAddDate().before(date)) {
                        for (Reservation reservation : post.getReservations()) {
                            if(reservation.getTimeSlice().getStartDate().before(date) && reservation.getTimeSlice().getEndDate().after(date)) {
                                ++people;
                            }
                        }
                    }
                }
            }
        }
        for (Room room : this.session.getRooms()) {
            if((this.roomSize==0) || (room.getPosts().length == this.roomSize) || ((this.roomSize==4) && (room.getPosts().length>3))) {
                for (Post post : room.getPosts()) {
                    if(post.getAddDate().before(date)) {
                        for (Reservation reservation : post.getReservations()) {
                            if(reservation.getTimeSlice().getStartDate().before(date) && reservation.getTimeSlice().getEndDate().after(date)) {
                                ++occupiedPosts;
                                break;
                            }
                        }
                    }
                }
            }
        }
        this.numberLabel1 = "Työpisteen omaavia ihmisiä: "+people;
        this.numberLabel2 = "Varattujen työpisteiden määrä: "+occupiedPosts;
        return people/occupiedPosts;
    }
    
    /**
     * Tekee annetusta graafista graafi-ikkunan ja lisää sen ruutuun
     * @param chart piirrettävä graafi
     */
    public void drawChart(JFreeChart chart) {
        jPanel1.removeAll();
        this.chartPanel = new ChartPanel(chart);
        chartPanel.setBounds(0, 0, this.jPanel1.getBounds().width, this.jPanel1.getBounds().height);
        jPanel1.add(chartPanel);
        jPanel1.updateUI();
    }
    
    /**
     * Tehdään graafi siitä kuinka suuri osa työpisteistä on varattuja
     */
    public void createOccupiedPostPercentageChart() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        int months = (endDate.getMonth()+1)-(startDate.getMonth()+1)+((endDate.getYear()-startDate.getYear())*12)+1;
        
        Date current = new Date(startDate.getYear(), startDate.getMonth(), startDate.getDate());
        String series1 = "First";
        
        for(int i=0; i<months; ++i) {
            dataset.addValue(getPostOccupationData(current), series1, (current.getMonth()%12+1)+"/"+(current.getYear()-100));
            current.setMonth(current.getMonth()+1);
        }
        JFreeChart chart = ChartFactory.createLineChart(
            "Työpisteiden varausaste",     // chart title
            "Kuukausi",                    // domain axis label
            "Varausaste prosentteina",     // range axis label
            dataset,                       // data
            PlotOrientation.VERTICAL,      // orientation
            false,                         // include legend
            false,                         // tooltips
            false                          // urls
        );
       // tähän chartin väritystä sun muuta turhuutta jos halutaan
        drawChart(chart);
    }
    
    /**
     * Tehdään graafi siitä kuinka monta henkilöä keskimäärin istuu varatuilla työpisteillä
     */
    public void createPeoplePerPostChart() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        int months = (endDate.getMonth()+1)-(startDate.getMonth()+1)+((endDate.getYear()-startDate.getYear())*12)+1;
        
        Date current = new Date(startDate.getYear(), startDate.getMonth(), startDate.getDate());
        String series1 = "First";
        
        for(int i=0; i<months; ++i) {
            dataset.addValue(getPeoplePerTakenPostData(current), series1, (current.getMonth()%12+1)+"/"+(current.getYear()-100));
            current.setMonth(current.getMonth()+1);
        }
        JFreeChart chart = ChartFactory.createLineChart(
            "Varattujen työpisteiden täyttöaste",     // chart title
            "Kuukausi",                               // domain axis label
            "Ihmisiä per työpiste",                   // range axis label
            dataset,                                  // data
            PlotOrientation.VERTICAL,                 // orientation
            false,                                    // include legend
            false,                                    // tooltips
            false                                     // urls
        );
        // tähän chartin väritystä sun muuta turhuutta jos halutaan
        drawChart(chart);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox chartTypeDropdown;
    private javax.swing.JButton closeButton;
    private net.sourceforge.jcalendarbutton.JCalendarButton endDateCalendarButton;
    private javax.swing.JTextField endDateTextField;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox roomSizeDropdown;
    private net.sourceforge.jcalendarbutton.JCalendarButton startDateCalendarButton;
    private javax.swing.JTextField startDateTextField;
    // End of variables declaration//GEN-END:variables
}
