package fi.helsinki.cs.nero.ui;

/**
 *
 * @author lpesola
 */
import fi.helsinki.cs.nero.data.Person;
import fi.helsinki.cs.nero.data.Room;
import fi.helsinki.cs.nero.db.NeroDatabase;
import fi.helsinki.cs.nero.logic.ODTReportPrinter;
import fi.helsinki.cs.nero.logic.ReportWriter;
import fi.helsinki.cs.nero.logic.Session;
import fi.helsinki.cs.nero.logic.TxtReportPrinter;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultRowSorter;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.RowFilter.ComparisonType;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class ReportsWindow extends javax.swing.JFrame {

    private Session session;
    private ArrayList<JCheckBox> roomComponents;
    private ArrayList<JCheckBox> peopleComponents;
    private ArrayList<JCheckBox> lockerComponents;
    private TableColumnModel roomColumnModel;
    private TableColumnModel peopleColumnModel;
    private TableColumnModel lockerColumnModel;
    private HashMap<String, IndexedColumn> hiddenRoomColumns;
    private HashMap<String, IndexedColumn> hiddenPeopleColumns;
    private HashMap<String, IndexedColumn> hiddenLockerColumns;
    private Room[] rooms;
    private Person[] people;
    private Vector<Vector<String>> roomData;
    private Vector<String> roomColumnNames;
    private Vector<Vector<Object>> peopleData;
    private Vector<String> peopleColumnNames;
    private Vector<Vector<String>> lockerData;
    private Vector<String> lockerColumnNames;
    private TableRowSorter<TableModel> rowSorter;
    private RowFilter generalFilter;
    private ReportWriter printer;
    private Date today;
    private String varaus, nimi, huone, nimike, sposti;
    private String kayttaja, postihuone, puhelinnumero;
    private String huonenumero, kerros, pisteiden_lkm;
    private String structuredFileType;
    // TODO: pitäisikö olla yksi lista filtereistä ja pitää aina and-filteriä
    // ja laittaa listaan aina uusi filteri -> voi filteröidä kaikilla rajoittimilla
    //testi
    // combobox models not used yet
    private DefaultComboBoxModel wingsModel;
//    private DefaultComboBoxModel fileTypeModel;
    private DefaultComboBoxModel floorsModel;
    private int[] floors = new int[]{1, 2, 3};
    private char[] wings = new char[]{'A', 'B', 'C', 'D'};

    /**
     * Creates new form Reports
     */
    public ReportsWindow() {

        // koodia testausta varten, voi poistaa kun tämä ikkuna
        // integroidaan muuhun käliin
        // toimiva sessio
        session = new Session();
        NeroDatabase db = new NeroDatabase(session,
                "oracle.jdbc.driver.OracleDriver",
                "jdbc:oracle:thin:@bodbacka:1521:test",
                "tk_testi", "tapaus2");
        session.setDatabase(db);
        // testikoodin loppu

        today = new Date();
        rooms = session.getRooms();
        people = session.getFilteredPeople();
        initStringVariables();
        initComponents();
        initContainerData();
        initModels();
        initColumnData();
        initColumnNames();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewButtons = new javax.swing.ButtonGroup();
        fileChooserDialog = new javax.swing.JFileChooser();
        overwriteCheck = new javax.swing.JOptionPane();
        checkboxContainer = new javax.swing.JPanel();
        roomAttributes = new javax.swing.JPanel();
        showPostCount = new javax.swing.JCheckBox();
        showWing = new javax.swing.JCheckBox();
        showRoomName = new javax.swing.JCheckBox();
        showFloor = new javax.swing.JCheckBox();
        personAttributes = new javax.swing.JPanel();
        showRoomAndPost = new javax.swing.JCheckBox();
        showEmail = new javax.swing.JCheckBox();
        showReservations = new javax.swing.JCheckBox();
        showPhone = new javax.swing.JCheckBox();
        showJobTitle = new javax.swing.JCheckBox();
        lockerAttributes = new javax.swing.JPanel();
        showRoom = new javax.swing.JCheckBox();
        showPhone2 = new javax.swing.JCheckBox();
        restrictionsContainer = new javax.swing.JPanel();
        wing = new javax.swing.JLabel();
        wingDropdown = new javax.swing.JComboBox();
        floor = new javax.swing.JLabel();
        floorDropdown = new javax.swing.JComboBox();
        restrictByHasLocker = new javax.swing.JComboBox();
        rajauksetHeader = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        restrictByName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lastCalendar = new net.sourceforge.jcalendarbutton.JCalendarButton();
        firstCalendar = new net.sourceforge.jcalendarbutton.JCalendarButton();
        restrictByFirstDate = new javax.swing.JTextField();
        restrictByLastDate = new javax.swing.JTextField();
        restrictByPostRoom = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        peopleButton = new javax.swing.JRadioButton();
        saveButton = new javax.swing.JButton();
        tableContainer = new javax.swing.JScrollPane();
        Data = new javax.swing.JTable();
        lockerButton = new javax.swing.JRadioButton();
        roomButton = new javax.swing.JRadioButton();
        fileTypeChooser = new javax.swing.JComboBox();

        fileChooserDialog.setDialogTitle("Tallenna");

        overwriteCheck.setMessage("Ylikirjoitetaanko?");
        overwriteCheck.setMessageType(JOptionPane.QUESTION_MESSAGE);
        overwriteCheck.setOptionType(JOptionPane.YES_NO_OPTION);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        showPostCount.setText("Työpisteiden lkm");
        showPostCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPostCountActionPerformed(evt);
            }
        });

        showWing.setText("Siipi");

        showRoomName.setText("Huoneen nimi");
        showRoomName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showRoomNameMouseReleased(evt);
            }
        });

        showFloor.setText("Kerros");
        showFloor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showFloorMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout roomAttributesLayout = new javax.swing.GroupLayout(roomAttributes);
        roomAttributes.setLayout(roomAttributesLayout);
        roomAttributesLayout.setHorizontalGroup(
            roomAttributesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomAttributesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomAttributesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showFloor)
                    .addComponent(showPostCount)
                    .addComponent(showRoomName)
                    .addComponent(showWing))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        roomAttributesLayout.setVerticalGroup(
            roomAttributesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomAttributesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showFloor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showWing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPostCount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showRoomName)
                .addContainerGap())
        );

        showRoomAndPost.setText(huone);
        showRoomAndPost.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showRoomAndPostMouseReleased(evt);
            }
        });

        showEmail.setText(sposti);
        showEmail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showEmailMouseReleased(evt);
            }
        });

        showReservations.setText(varaus);
        showReservations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showReservationsMouseReleased(evt);
            }
        });

        showPhone.setText(puhelinnumero);

        showJobTitle.setText(nimike);
        showJobTitle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showJobTitleMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout personAttributesLayout = new javax.swing.GroupLayout(personAttributes);
        personAttributes.setLayout(personAttributesLayout);
        personAttributesLayout.setHorizontalGroup(
            personAttributesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personAttributesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(personAttributesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showRoomAndPost)
                    .addComponent(showPhone)
                    .addComponent(showReservations)
                    .addComponent(showEmail)
                    .addComponent(showJobTitle))
                .addContainerGap())
        );
        personAttributesLayout.setVerticalGroup(
            personAttributesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personAttributesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showRoomAndPost)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPhone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showReservations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showJobTitle)
                .addContainerGap())
        );

        showRoom.setText("Työhuone");
        showRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showRoomMouseReleased(evt);
            }
        });

        showPhone2.setText("Puhelinnumero");
        showPhone2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showPhone2MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout lockerAttributesLayout = new javax.swing.GroupLayout(lockerAttributes);
        lockerAttributes.setLayout(lockerAttributesLayout);
        lockerAttributesLayout.setHorizontalGroup(
            lockerAttributesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lockerAttributesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lockerAttributesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showRoom)
                    .addComponent(showPhone2))
                .addContainerGap())
        );
        lockerAttributesLayout.setVerticalGroup(
            lockerAttributesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lockerAttributesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showRoom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPhone2)
                .addContainerGap())
        );

        wing.setText("Siipi");

        wingDropdown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A", "B", "C", "D" }));
        wingDropdown.setToolTipText("");

        floor.setText("Kerros");

        floorDropdown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "Kaikki" }));
        floorDropdown.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                floorDropdownItemStateChanged(evt);
            }
        });

        restrictByHasLocker.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kaikki", "Lokerottomat", "Lokerolliset" }));
        restrictByHasLocker.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                restrictByHasLockerItemStateChanged(evt);
            }
        });

        rajauksetHeader.setText("Rajaukset");

        jLabel1.setText("Näytä");

        jLabel2.setText("Varaus päättyy aikavälillä");
        jLabel2.setToolTipText("Aseta aikaväli, jonka aikana päättyvät varaukset näytetään");

        jLabel3.setText("Nimi");

        restrictByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restrictByNameActionPerformed(evt);
            }
        });

        jLabel4.setText("Alkupvm.");

        jLabel5.setText("Loppupvm.");

        lastCalendar.setToolTipText("Aikavälin viimeinen päivä");
        lastCalendar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lastCalendarPropertyChange(evt);
            }
        });

        firstCalendar.setToolTipText("Aikavälin ensimmäinen päivä");
        firstCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstCalendarActionPerformed(evt);
            }
        });
        firstCalendar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                firstCalendarPropertyChange(evt);
            }
        });

        restrictByFirstDate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        restrictByFirstDate.setText(dateToShortString(today));
        restrictByFirstDate.setToolTipText("Aikavälin ensimmäinen päivä muodossa DD.MM.YYYY");
        restrictByFirstDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restrictByFirstDateActionPerformed(evt);
            }
        });

        restrictByLastDate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        restrictByLastDate.setText("31.12.2112");
        restrictByLastDate.setToolTipText("Aikavälin viimeinen päivä muodossa DD.MM.YYYY");
        restrictByLastDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restrictByLastDateActionPerformed(evt);
            }
        });

        restrictByPostRoom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "Sivutoimiset" }));
        restrictByPostRoom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                restrictByPostRoomItemStateChanged(evt);
            }
        });

        jLabel6.setText("Postihuone");

        javax.swing.GroupLayout restrictionsContainerLayout = new javax.swing.GroupLayout(restrictionsContainer);
        restrictionsContainer.setLayout(restrictionsContainerLayout);
        restrictionsContainerLayout.setHorizontalGroup(
            restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restrictionsContainerLayout.createSequentialGroup()
                .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(restrictionsContainerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(floor)
                            .addComponent(wing))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wingDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(floorDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(87, 87, 87))
                    .addGroup(restrictionsContainerLayout.createSequentialGroup()
                        .addComponent(rajauksetHeader)
                        .addGap(157, 157, 157)))
                .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(restrictionsContainerLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(restrictionsContainerLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(restrictionsContainerLayout.createSequentialGroup()
                                .addComponent(restrictByFirstDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(firstCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(restrictByLastDate, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lastCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(jLabel1))
                            .addGroup(restrictionsContainerLayout.createSequentialGroup()
                                .addComponent(restrictByName, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(restrictByHasLocker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(restrictByPostRoom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(124, 124, 124))))
        );
        restrictionsContainerLayout.setVerticalGroup(
            restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restrictionsContainerLayout.createSequentialGroup()
                .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rajauksetHeader)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, restrictionsContainerLayout.createSequentialGroup()
                        .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(restrictByLastDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(lastCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(restrictByHasLocker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(firstCalendar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(wingDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(wing)
                                .addComponent(jLabel4)
                                .addComponent(restrictByFirstDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(floorDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(floor)
                            .addComponent(jLabel3)
                            .addComponent(restrictByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, restrictionsContainerLayout.createSequentialGroup()
                        .addGroup(restrictionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(restrictByPostRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(39, 39, 39))))
        );

        javax.swing.GroupLayout checkboxContainerLayout = new javax.swing.GroupLayout(checkboxContainer);
        checkboxContainer.setLayout(checkboxContainerLayout);
        checkboxContainerLayout.setHorizontalGroup(
            checkboxContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkboxContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkboxContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(restrictionsContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(checkboxContainerLayout.createSequentialGroup()
                        .addComponent(personAttributes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(168, 168, 168)
                        .addComponent(roomAttributes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(338, 338, 338)
                        .addComponent(lockerAttributes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(262, Short.MAX_VALUE))
        );
        checkboxContainerLayout.setVerticalGroup(
            checkboxContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkboxContainerLayout.createSequentialGroup()
                .addGroup(checkboxContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(personAttributes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomAttributes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(checkboxContainerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lockerAttributes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addComponent(restrictionsContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        viewButtons.add(peopleButton);
        peopleButton.setText("Henkilöt");
        peopleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                peopleButtonMouseReleased(evt);
            }
        });

        saveButton.setText("Tallenna");
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                saveButtonMouseReleased(evt);
            }
        });

        Data.setAutoCreateColumnsFromModel(false);
        Data.setAutoCreateRowSorter(true);
        Data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        Data.setEnabled(false);
        Data.setRowSelectionAllowed(false);
        tableContainer.setViewportView(Data);

        viewButtons.add(lockerButton);
        lockerButton.setText("Postilokerot");
        lockerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lockerButtonMouseReleased(evt);
            }
        });

        viewButtons.add(roomButton);
        roomButton.setText("Huoneet");
        roomButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                roomButtonMouseReleased(evt);
            }
        });

        fileTypeChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "txt", "ODS" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(peopleButton)
                .addGap(233, 233, 233)
                .addComponent(roomButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lockerButton)
                .addGap(412, 412, 412))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveButton)
                .addGap(18, 18, 18)
                .addComponent(fileTypeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(checkboxContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tableContainer)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomButton)
                    .addComponent(peopleButton)
                    .addComponent(lockerButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(checkboxContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(fileTypeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showPostCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPostCountActionPerformed
        if (showPostCount.isSelected()) {
            showColumn("Työpisteiden lkm", roomColumnModel, hiddenRoomColumns);
        } else {
            hideColumn("Työpisteiden lkm", roomColumnModel, hiddenRoomColumns);
        }
    }//GEN-LAST:event_showPostCountActionPerformed

    private void roomButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomButtonMouseReleased
        Data = new JTable(roomData, roomColumnNames);
        Data.setAutoCreateColumnsFromModel(false);
        roomColumnModel = Data.getColumnModel();
        setSelected(roomComponents);
        addSorter();
        tableContainer.setViewportView(Data);
    }//GEN-LAST:event_roomButtonMouseReleased

    private void peopleButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_peopleButtonMouseReleased
        PeopleTableModel peopleModel = new PeopleTableModel(varaus);
        peopleModel.setDataVector(peopleData, peopleColumnNames);
        Data = new JTable(peopleModel);
        peopleColumnModel = Data.getColumnModel();
        peopleModel.setColumnModel(peopleColumnModel);
        Data.setAutoCreateColumnsFromModel(false);
        peopleModel.setTable(Data);
        
        
        // asetetaan varaus-sarakkeelle oma renderer päivämäärää varten
        TableCellRenderer renderer = new DateCellRenderer();
        peopleColumnModel.getColumn(peopleColumnModel.getColumnIndex(varaus)).setCellRenderer(renderer);
        setSelected(peopleComponents);
        addSorter();
        tableContainer.setViewportView(Data);
    }//GEN-LAST:event_peopleButtonMouseReleased

    private void lockerButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lockerButtonMouseReleased
        Data = new JTable(lockerData, lockerColumnNames);
        Data.setAutoCreateColumnsFromModel(false);
        lockerColumnModel = Data.getColumnModel();
        setSelected(lockerComponents);
        addSorter();
        tableContainer.setViewportView(Data);

    }//GEN-LAST:event_lockerButtonMouseReleased

    private void showRoomNameMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showRoomNameMouseReleased
        if (showRoomName.isSelected()) {
            showColumn(nimi, roomColumnModel, hiddenRoomColumns);
        } else {
            hideColumn(nimi, roomColumnModel, hiddenRoomColumns);
        }
    }//GEN-LAST:event_showRoomNameMouseReleased

    private void showReservationsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showReservationsMouseReleased
        if (showReservations.isSelected()) {
            showColumn(varaus, peopleColumnModel, hiddenPeopleColumns);
        } else {
            hideColumn(varaus, peopleColumnModel, hiddenPeopleColumns);
        }
    }//GEN-LAST:event_showReservationsMouseReleased

    private void showFloorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showFloorMouseReleased
        if (showFloor.isSelected()) {
            showColumn("Kerros", roomColumnModel, hiddenRoomColumns);
        } else {
            hideColumn("Kerros", roomColumnModel, hiddenRoomColumns);
        }
    }//GEN-LAST:event_showFloorMouseReleased

    private void showRoomAndPostMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showRoomAndPostMouseReleased
        if (showRoomAndPost.isSelected()) {
            showColumn(huone, peopleColumnModel, hiddenPeopleColumns);
        } else {
            hideColumn(huone, peopleColumnModel, hiddenPeopleColumns);
        }
    }//GEN-LAST:event_showRoomAndPostMouseReleased

    private void showRoomMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showRoomMouseReleased
        if (showRoom.isSelected()) {
            showColumn(huone, lockerColumnModel, hiddenLockerColumns);
        } else {
            hideColumn(huone, lockerColumnModel, hiddenLockerColumns);
        }
    }//GEN-LAST:event_showRoomMouseReleased

    private void showPhone2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showPhone2MouseReleased
        if (showPhone2.isSelected()) {
            showColumn(puhelinnumero, lockerColumnModel, hiddenLockerColumns);
        } else {
            hideColumn(puhelinnumero, lockerColumnModel, hiddenLockerColumns);
        }
    }//GEN-LAST:event_showPhone2MouseReleased

    private void floorDropdownItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_floorDropdownItemStateChanged
        String value = floorDropdown.getSelectedItem().toString();
        if (value.equals("Kaikki")) {
            generalFilter = RowFilter.regexFilter("", Data.getColumnModel().getColumnIndex("Kerros"));
        } else {
            generalFilter = RowFilter.regexFilter(value, Data.getColumnModel().getColumnIndex("Kerros"));
        }
        DefaultRowSorter sorter = (TableRowSorter) Data.getRowSorter();
        sorter.setRowFilter(generalFilter);
        Data.setRowSorter(rowSorter);
    }//GEN-LAST:event_floorDropdownItemStateChanged

    private void restrictByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restrictByNameActionPerformed
        String value = restrictByName.getText();
        if (value == null || value.isEmpty()) {
            generalFilter = RowFilter.regexFilter("", Data.getColumnModel().getColumnIndex(nimi));
        } else {
            generalFilter = RowFilter.regexFilter(value, Data.getColumnModel().getColumnIndex(nimi));
        }
        // tälleen tablerowsorter modelin kanssa näyttää toimivan..
        TableRowSorter sorter = (TableRowSorter) Data.getRowSorter();
        sorter.setModel(Data.getModel());
        
        
        
        //DefaultRowSorter sorter = (TableRowSorter) Data.getRowSorter();
        sorter.setRowFilter(generalFilter);
        Data.setRowSorter(rowSorter);
    }//GEN-LAST:event_restrictByNameActionPerformed

    private void restrictByHasLockerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_restrictByHasLockerItemStateChanged
        int index = restrictByHasLocker.getSelectedIndex();
        if (index == 0) {
            // kaikki
            generalFilter = RowFilter.regexFilter("", Data.getColumnModel().getColumnIndex(postihuone));
        } else if (index == 1) {
            // lokerottomat
            generalFilter = RowFilter.regexFilter("ei postilokeroa", Data.getColumnModel().getColumnIndex(postihuone));
        } else if (index == 2) {
            // lokerolliset
            RowFilter regexFilter = RowFilter.regexFilter("ei postilokeroa", Data.getColumnModel().getColumnIndex(postihuone));
            generalFilter = RowFilter.notFilter(regexFilter);
        }
        DefaultRowSorter sorter = (TableRowSorter) Data.getRowSorter();
        sorter.setRowFilter(generalFilter);
        Data.setRowSorter(rowSorter);
    }//GEN-LAST:event_restrictByHasLockerItemStateChanged

    private void saveButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseReleased

        int option = fileChooserDialog.showSaveDialog(Data);
        // tallennus vain, jos on painettu "OK/Tallenna"
        if (option == JFileChooser.APPROVE_OPTION) {
            File f = fileChooserDialog.getSelectedFile();
            // kirjoitetaan vain jos tiedosto on uusi tai jos vanhan päälle saa kirjoittaa
            boolean writable = (!f.exists() || promptForOverWrite());
            if (writable) {
                print(f);
            }
        }
    }//GEN-LAST:event_saveButtonMouseReleased

    private void showJobTitleMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showJobTitleMouseReleased
        if (showJobTitle.isSelected()) {
            showColumn(nimike, peopleColumnModel, hiddenPeopleColumns);
        } else {
            hideColumn(nimike, peopleColumnModel, hiddenPeopleColumns);
        }
    }//GEN-LAST:event_showJobTitleMouseReleased

    private void firstCalendarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_firstCalendarPropertyChange
        if (evt.getNewValue() instanceof Date) {
            restrictByFirstDate.setText(dateToShortString(((Date) evt.getNewValue())));
            determineDateRestriction();
        }
    }//GEN-LAST:event_firstCalendarPropertyChange

    private void lastCalendarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lastCalendarPropertyChange
        if (evt.getNewValue() instanceof Date) {
            restrictByLastDate.setText(dateToShortString(((Date) evt.getNewValue())));
            // tsekataan pitääkö filteröidä jotenkin
            determineDateRestriction();
        }
    }//GEN-LAST:event_lastCalendarPropertyChange

    private void showEmailMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showEmailMouseReleased
        if (showEmail.isSelected()) {
            showColumn(sposti, peopleColumnModel, hiddenPeopleColumns);
        } else {
            hideColumn(sposti, peopleColumnModel, hiddenPeopleColumns);
        }
    }//GEN-LAST:event_showEmailMouseReleased

    private void restrictByFirstDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restrictByFirstDateActionPerformed
        determineDateRestriction();
    }//GEN-LAST:event_restrictByFirstDateActionPerformed

    private void restrictByLastDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restrictByLastDateActionPerformed
        determineDateRestriction();
    }//GEN-LAST:event_restrictByLastDateActionPerformed

    private void restrictByPostRoomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_restrictByPostRoomItemStateChanged
        String room = restrictByPostRoom.getSelectedItem().toString();
        if (room.isEmpty()) {
            // kaikki
            generalFilter = RowFilter.regexFilter("", Data.getColumnModel().getColumnIndex(postihuone));
        } else {
            // lokeron numero
            generalFilter = RowFilter.regexFilter(room, Data.getColumnModel().getColumnIndex(postihuone));
        }
        

        DefaultRowSorter sorter = (TableRowSorter) Data.getRowSorter();
        sorter.setRowFilter(generalFilter);
        Data.setRowSorter(rowSorter);
    }//GEN-LAST:event_restrictByPostRoomItemStateChanged

    private void firstCalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstCalendarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstCalendarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportsWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportsWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportsWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportsWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ReportsWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Data;
    private javax.swing.JPanel checkboxContainer;
    private javax.swing.JFileChooser fileChooserDialog;
    private javax.swing.JComboBox fileTypeChooser;
    private net.sourceforge.jcalendarbutton.JCalendarButton firstCalendar;
    private javax.swing.JLabel floor;
    private javax.swing.JComboBox floorDropdown;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private net.sourceforge.jcalendarbutton.JCalendarButton lastCalendar;
    private javax.swing.JPanel lockerAttributes;
    private javax.swing.JRadioButton lockerButton;
    private javax.swing.JOptionPane overwriteCheck;
    private javax.swing.JRadioButton peopleButton;
    private javax.swing.JPanel personAttributes;
    private javax.swing.JLabel rajauksetHeader;
    private javax.swing.JTextField restrictByFirstDate;
    private javax.swing.JComboBox restrictByHasLocker;
    private javax.swing.JTextField restrictByLastDate;
    private javax.swing.JTextField restrictByName;
    private javax.swing.JComboBox restrictByPostRoom;
    private javax.swing.JPanel restrictionsContainer;
    private javax.swing.JPanel roomAttributes;
    private javax.swing.JRadioButton roomButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox showEmail;
    private javax.swing.JCheckBox showFloor;
    private javax.swing.JCheckBox showJobTitle;
    private javax.swing.JCheckBox showPhone;
    private javax.swing.JCheckBox showPhone2;
    private javax.swing.JCheckBox showPostCount;
    private javax.swing.JCheckBox showReservations;
    private javax.swing.JCheckBox showRoom;
    private javax.swing.JCheckBox showRoomAndPost;
    private javax.swing.JCheckBox showRoomName;
    private javax.swing.JCheckBox showWing;
    private javax.swing.JScrollPane tableContainer;
    private javax.swing.ButtonGroup viewButtons;
    private javax.swing.JLabel wing;
    private javax.swing.JComboBox wingDropdown;
    // End of variables declaration//GEN-END:variables

    private void initContainerData() {

        /* Checkboxes for rooms view report*/
        roomComponents = new ArrayList<>();
        roomComponents.add(showPostCount);
        roomComponents.add(showFloor);
        roomComponents.add(showWing);
        roomComponents.add(showRoomName);

        /*Components for people view report*/
        peopleComponents = new ArrayList<>();
        peopleComponents.add(showEmail);
        peopleComponents.add(showPhone);
        peopleComponents.add(showRoomAndPost);
        peopleComponents.add(showReservations);
        peopleComponents.add(showJobTitle);

        /*Components for post locker report*/
        lockerComponents = new ArrayList<>();
        lockerComponents.add(showRoom);
        //TODO: vaihda tuo muuttujanimi...
        lockerComponents.add(showPhone2);

    }

    private void initModels() {


        /*ColumnModels for different views*/
        hiddenRoomColumns = new HashMap<>();
        hiddenPeopleColumns = new HashMap<>();
        hiddenLockerColumns = new HashMap<>();
        
        

        /*Dropdown menu models - currently not used*/
        wingsModel = new DefaultComboBoxModel();
        floorsModel = new DefaultComboBoxModel();
        for (int i = 0; i < floors.length; i++) {
            floorsModel.addElement(floors[i]);
        }
        for (int i = 0; i < floors.length; i++) {
            wingsModel.addElement(wings[i]);
        }
//        fileTypeModel = new DefaultComboBoxModel();
//        fileTypeModel.addElement("txt");
//        fileTypeModel.addElement(structuredFileType);
    }

    private void initColumnData() {
        //TODO: erota nimet ja identifierit toisistaan, ettei tule skandiongelmia?
        // niin ja Date-column pitää saada palauttamaan Date getClassilla

        /* alustetaan data huoneiden tietojen näyttämistä varten
         ideana se, että data taustalla pysyy aina samana ja se sidotaan
         tiettyihin sarakkeisiin (sarakkeiden identifierit tulevat nimivektorista)
         käyttäjän inputista riippuen näytetään tai piilotetaan tietty sarake,
         mutta data taustalla pysyy samana */

        // huone-tarkastelun data ja sarakkeet
        roomData = new Vector<>();
        for (int i = 0; i < rooms.length; i++) {
            Vector<String> v = new Vector<>();
            v.add(rooms[i].getRoomNumber().toString());
            v.add(rooms[i].getFloor().toString());
            v.add(new Integer(rooms[i].getPosts().length).toString());
            v.add(rooms[i].getRoomName());
            roomData.add(i, v);
        }


        // henkilö-tarkastelun data ja sarakkeet
        // laitetaan samalla data myös postilokero-näkymän dataan
        peopleData = new Vector<>();
        lockerData = new Vector<>();
        for (int i = 0; i < people.length; i++) {
            Vector<Object> peopleRow = new Vector<>();
            Vector<String> lockerRow = new Vector<>();
            lockerRow.add(people[i].getName());
            if (people[i].getPostilokeroHuone() == null) {
                lockerRow.add("ei postilokeroa");
            } else {
                lockerRow.add(people[i].getPostilokeroHuone());
            }
            lockerRow.add(people[i].getRoom());
            lockerRow.add(people[i].getWorkPhone());
            lockerRow.add(people[i].getTitteli());
            lockerRow.add(people[i].getSahkoposti());
            peopleRow.add(people[i].getName());
            peopleRow.add(people[i].getRoom());
            if (people[i].getLastReservation() == null) {
                peopleRow.add(null);
            } else { 
                peopleRow.add(people[i].getLastReservation().getLastDay());
            }
            peopleRow.add(people[i].getTitteli());
            peopleRow.add(people[i].getSahkoposti());
            peopleData.add(i, peopleRow);
            lockerData.add(i, lockerRow);
        }
    }

    private void initColumnNames() {

        roomColumnNames = new Vector<>();
        roomColumnNames.add(huonenumero);
        roomColumnNames.add(kerros);
        roomColumnNames.add(pisteiden_lkm);
        roomColumnNames.add(nimi);

        peopleColumnNames = new Vector<>();
        peopleColumnNames.add(nimi);
        peopleColumnNames.add(huone);
        peopleColumnNames.add(varaus);
        peopleColumnNames.add(nimike);
        peopleColumnNames.add(sposti);

        lockerColumnNames = new Vector<>();
        lockerColumnNames.add(kayttaja);
        lockerColumnNames.add(postihuone);
        lockerColumnNames.add(huone);
        lockerColumnNames.add(puhelinnumero);

    }

    private void showColumn(String name, TableColumnModel model,
            HashMap<String, IndexedColumn> hiddenColumns) {
   
        IndexedColumn column = hiddenColumns.remove(name);
        if (column != null) {
            model.addColumn(column.getTableColumn());
            int lastColumn = model.getColumnCount() - 1;
            if (column.getIndex() < lastColumn) {
                model.moveColumn(lastColumn, column.getIndex());
            }
        }
    }

    private void hideColumn(String name, TableColumnModel model,
            HashMap<String, IndexedColumn> hiddenColumns) {
    
        int index = model.getColumnIndex(name);
        TableColumn column = model.getColumn(index);
        IndexedColumn indexedColumn = new IndexedColumn(index, column);
        hiddenColumns.put(name, indexedColumn);
        
        model.removeColumn(column);
    }

    private void setSelected(ArrayList<JCheckBox> components) {
        for (JCheckBox jcomp : components) {
            jcomp.setSelected(true);
        }
    }

    private void addSorter() {
        rowSorter = new TableRowSorter<>(Data.getModel());
        Data.setRowSorter(rowSorter);
    }

    private int[] listShownColumnsByIndex() {
        Enumeration<TableColumn> e = Data.getColumnModel().getColumns();
        int[] neededIndexes = new int[Data.getColumnCount()];
        int z = 0;
        while (e.hasMoreElements()) {
            String s = e.nextElement().getIdentifier().toString();
            neededIndexes[z] = Data.getColumnModel().getColumnIndex(s);
            z++;
        }
        return neededIndexes;
    }

    private List<List> getTableDataAsList() {

        List<List> list = new ArrayList<>();
        /* - tarkista, mitkä sarakkeet ovat näkyvillä
         * - ota talteen niiden nimet ja laita ensimmäiseksi listaan
         * - hae data niistä sarakkeista, jotka ovat näkyvillä
         */
        List columnNames = getShownColumnIdentifiers();
        list.add(0, columnNames);
        list.addAll(1, getShownColumnData());

        return list;
    }


    private String dateToShortString(Date date) {
        if (date != null) {
            String dateString = "";
            dateString = dateString.concat(date.getDate() + ".");
            dateString = dateString.concat((1 + date.getMonth()) + ".");
            dateString = dateString.concat(new Integer((date.getYear()) + 1900).toString());
            return dateString;
        } else {
            return null;
        }
    }

    private void determineDateRestriction() {
        // näkymässä työsuhteen loppuajan alkupäivämäärä ja loppupäivämäärä
        // sekä kalenterit (näistä ei tartte välittää?)
        // case 1-> jos molemmat asetettu, muodostetaan timeslice niistä
        // ja katsotaan sijoittuuko taulukon contract-sarakkeessa oleva loppupäivä tälle välille
        //  * jos sijoittuu, näytetään rivi -> ei muita rivejä
        // case 2-> jos vain loppu asetettu, katsotaan, onko loppupäivä ennen välin loppua
        //  * jos on, näytetään rivi
        // case 3-> jos alku asetettu, katso onko loppupäivä alun jälkeen
        //  * jos on, näytä rivi

        Date firstDate = hasDate(restrictByFirstDate.getText());
        Date lastDate = hasDate(restrictByLastDate.getText());
        RowFilter filter;
        if (firstDate != null && lastDate != null) {
            // molemmissa päivämäärä
            filter = setDateRestrictionContains(firstDate, lastDate);
        } else if (firstDate == null && lastDate != null) {
            // loppupäivämäärä on
            filter = setDateRestriction(lastDate, RowFilter.ComparisonType.BEFORE);
        } else if (firstDate != null && lastDate == null) {
            // alkupäivämäärä on
            filter = setDateRestriction(firstDate, RowFilter.ComparisonType.AFTER);
        } else {
            // kumpaakaan ei asetettu -> poistetaan 
            filter = removeDateRestriction();
        }

        TableRowSorter sorter = (TableRowSorter) Data.getRowSorter();
        sorter.setModel(Data.getModel());
        sorter.setRowFilter(filter);
    }


    private RowFilter setDateRestriction(Date date, ComparisonType type) {
        int index = Data.convertColumnIndexToModel(Data.getColumnModel().getColumnIndex(varaus));
        RowFilter newFilter = RowFilter.dateFilter(type,
                date, index);
        return newFilter;
    }

    private RowFilter setDateRestrictionContains(Date first, Date last) {
        // and filter 
        List<RowFilter<Object, Object>> filters = new ArrayList<>(2);
        filters.add(setDateRestriction(last, RowFilter.ComparisonType.BEFORE));
        filters.add(setDateRestriction(first, RowFilter.ComparisonType.AFTER));
        RowFilter<Object, Object> newFilter = RowFilter.andFilter(filters);
        return newFilter;
    }

    private Date hasDate(String s) {
        /* Palauttaa muotoa pp.kk.vvvv olevasta merkkijonosta muodostetun päivämäärän
         Jos merkkijono on tyhjä tai syöte on null, palautetaan null*/
        if (s == null | s.isEmpty()) {
            return null;
        } else {
            return parseDate(s);
        }
    }

    private void initStringVariables() {
        // henkilö
        varaus = "Varaus päättyy";
        nimi = "Nimi";
        huone = "Huone";
        nimike = "Nimike";
        sposti = "Sähköposti";

        // huone
        huonenumero = "Huoneen nro";
        kerros = "Kerros";
        pisteiden_lkm = "Työpisteiden lkm";

        // postilokero    
        kayttaja = "Käyttäjä";
        postihuone = "Postihuone";
        puhelinnumero = "Puhelinnumero";

        structuredFileType = "ODS";
    }

    private Date parseDate(String text) {
        Date date = new Date();
        if (text != null) {
            String[] split = text.split("\\.");
            date.setDate(new Integer(split[0]));
            date.setMonth(new Integer(split[1]) - 1);
            date.setYear(new Integer(split[2]) - 1900);
        }
        return date;
    }

    private RowFilter removeDateRestriction() {
        RowFilter newFilter = RowFilter.regexFilter("", Data.getColumnModel().getColumnIndex(varaus));
        return newFilter;
    }

    private void print(File f) {

        String fileType = fileTypeChooser.getSelectedItem().toString();
        if (fileType.equals(structuredFileType)) {
            printer = new ODTReportPrinter(f);
        } else {
            printer = new TxtReportPrinter(f);
        }
        printer.print(getTableDataAsList());
    }

    private boolean promptForOverWrite() {

        int option = JOptionPane.showConfirmDialog(fileChooserDialog,
                "Ylikirjoita?", "Tiedosto on jo olemassa",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (option == JOptionPane.OK_OPTION) {
            return true;
        } else {
            return false;
        }
    }

    private List getShownColumnIdentifiers() {

        Enumeration<TableColumn> e = Data.getColumnModel().getColumns();
        int z = 0;
        List rowData = new ArrayList();
        while (e.hasMoreElements()) {
            String s = e.nextElement().getIdentifier().toString();
            rowData.add(z, s);
            z++;
        }
        return rowData;


    }

    private Collection<? extends List> getShownColumnData() {

        int[] neededIndexes = listShownColumnsByIndex();
        TableModel tableModel = Data.getModel();
        DefaultRowSorter rs = (DefaultRowSorter) Data.getRowSorter();
        int columnCount = Data.getColumnCount();
        int rowCount = rs.getViewRowCount();
        ArrayList list = new ArrayList(rowCount);

        // käydään läpi kaikki näkyvillä olevat rivit
        // tsekataan mitä alla olevan mallin riviä niiden indeksi vastaa ja
        // laitetaan sen rivin data listaan
        // mallin sarakenumero pitää muuttaa sarakemallin indeksiksi, jotta myös
        // sarakkeen data saadaan oikeaan kohtaan
        
        //TODO: ehkä tuon päivämäärän lyhentämisen voi tehdä myöskin jossain muualla
        for (int i = 0; i < rowCount; i++) {
            List rowList = new ArrayList(columnCount);
            int rowIndexInView = rs.convertRowIndexToModel(i);
            for (int j = 0; j < columnCount; j++) {
                Object o = tableModel.getValueAt(rowIndexInView,
                        Data.convertColumnIndexToModel(neededIndexes[j]));
                String value;
                if (o == null) {
                    value = "";
                } else if (o.getClass() == Date.class) {
                    value = dateToShortString((Date) o);
                } else {
                    value = o.toString();
                }
                rowList.add(j, value);
                
//                rowList.add(j, tableModel.getValueAt(rowIndexInView,
  //                      Data.convertColumnIndexToModel(neededIndexes[j])).toString());
            }
            list.add(rowList);
        }
        return list;
    }
}
